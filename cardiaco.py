# -*- coding: utf-8 -*-
"""Cardiaco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mr8edFYiwFG6iGgcth8sZ53ZEkcojcdN
"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df_cardio = pd.read_csv("cardio_train.csv", sep=";", index_col=0)

df_cardio.info

df_cardio.head()

from plotly.subplots import make_subplots
import plotly.graph_objects as go

fig = make_subplots (rows=4, cols=1)

fig.add_trace(go.Box(x=df_cardio["age"] / 365, name="Idade"), row=1, col=1)
fig.add_trace(go.Box(x=df_cardio["weight"], name="Peso"), row=2, col=1)
fig.add_trace(go.Box(x=df_cardio["ap_hi"],name="Pressão sistólica"), row=3, col=1)
fig.add_trace(go.Box(x=df_cardio["ap_lo"],name="Pressão Diastólica"), row=4, col=1)

fig.update_layout(height=700)
fig.show()

from plotly.subplots import make_subplots

fig = make_subplots(rows=2, cols=3)
fig.add_trace(go.Bar(y=df_cardio["gender"].value_counts(), x=["Feminino","Masculino"], name="Genero"), row=1, col=1)
fig.add_trace(go.Bar(y=df_cardio["cholesterol"].value_counts(), x=["Normal","acima do normal","muito acima do normal"], name="Colesterol"), row=1, col=2)
fig.add_trace(go.Bar(y=df_cardio["gluc"].value_counts(), x=["Normal","acima do normal","muito acima do normal"], name="Glicose"), row=1, col=3)
fig.add_trace(go.Bar(y=df_cardio["smoke"].value_counts(), x=["Não Fumante", "Fumante"], name="Fumante"), row=2, col=1)
fig.add_trace(go.Bar(y=df_cardio["alco"].value_counts(), x=["Não Alcolatra", "Alcolatra"], name="Alcolatra"), row=2, col=2)
fig.add_trace(go.Bar(y=df_cardio["active"].value_counts(), x=["Não Ativo","Ativo"], name="Ativo"), row=2, col=3)

fig.update_layout(height=700)
fig.show()

df_cardio["cardio"].value_counts() / df_cardio["cardio"].value_counts().sum()

import seaborn as sns

fig, ax = plt.subplots(figsize=(30, 10))
sns.heatmap(df_cardio.corr(), annot=True, cmap="RdYlGn")

Y = df_cardio["cardio"]
X = df_cardio.loc[:, df_cardio.columns != 'cardio']

X

Y

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

from sklearn.ensemble import RandomForestClassifier

ml_model = RandomForestClassifier()
ml_model.fit(x_train, y_train)

ml_model.predict(x_test.iloc[500].values.reshape(1, -1))

y_test.iloc[0]

from sklearn.metrics import classification_report, confusion_matrix

predictions = ml_model.predict(x_test)

print(classification_report(y_test, predictions))
print(confusion_matrix(y_test, predictions))